# AUTOGENERATED from:
# $ python stm_register_builder.py stm32lib/CMSIS/STM32WBxx/Include/stm32wb55xx.h

from stm_dma_timer import Register, const


PERIPH_BASE = const(0x40000000)  # Peripheral base address
APB1PERIPH_BASE = const(PERIPH_BASE)
APB2PERIPH_BASE = const(PERIPH_BASE + 0x00010000)
AHB1PERIPH_BASE = const(PERIPH_BASE + 0x00020000)
AHB4PERIPH_BASE = const(PERIPH_BASE + 0x18000000)
TIM2_BASE = const(APB1PERIPH_BASE + 0x00000000)
TIM1_BASE = const(APB2PERIPH_BASE + 0x00002C00)
TIM16_BASE = const(APB2PERIPH_BASE + 0x00004400)
TIM17_BASE = const(APB2PERIPH_BASE + 0x00004800)
SAI1_BASE = const(APB2PERIPH_BASE + 0x00005400)
DMA1_BASE = const(AHB1PERIPH_BASE + 0x00000000)
DMA2_BASE = const(AHB1PERIPH_BASE + 0x00000400)
DMAMUX1_BASE = const(AHB1PERIPH_BASE + 0x00000800)
DMA1_Channel1_BASE = const(DMA1_BASE + 0x00000008)
DMA1_Channel2_BASE = const(DMA1_BASE + 0x0000001C)
DMA2_Channel1_BASE = const(DMA2_BASE + 0x00000008)
DMA2_Channel2_BASE = const(DMA2_BASE + 0x0000001C)
DMAMUX1_Channel0_BASE = const(DMAMUX1_BASE)
DMAMUX1_Channel7_BASE = const(DMAMUX1_BASE + 0x0000001C)
DMAMUX1_RequestGenerator0_BASE = const(DMAMUX1_BASE + 0x00000100)
DMAMUX1_ChannelStatus_BASE = const(DMAMUX1_BASE + 0x00000080)
DMAMUX1_RequestGenStatus_BASE = const(DMAMUX1_BASE + 0x00000140)
RCC_BASE = const(AHB4PERIPH_BASE + 0x00000000)
DBGMCU_BASE = const(0xE0042000)
DMA_ISR_GIF1 = const(0x1 << 0)  # Channel 1 Global interrupt flag  # 0x00000001
DMA_CCR_EN = const(0x1 << 0)  # Channel enable  # 0x00000001
DMA_CCR_TCIE = const(0x1 << 1)  # Transfer complete interrupt enable  # 0x00000002
DMA_CCR_HTIE = const(0x1 << 2)  # Half Transfer interrupt enable  # 0x00000004
DMA_CCR_TEIE = const(0x1 << 3)  # Transfer error interrupt enable  # 0x00000008
DMA_CCR_DIR = const(0x1 << 4)  # Data transfer direction  # 0x00000010
DMA_CCR_CIRC = const(0x1 << 5)  # Circular mode  # 0x00000020
DMA_CCR_PINC = const(0x1 << 6)  # Peripheral increment mode  # 0x00000040
DMA_CCR_MINC = const(0x1 << 7)  # Memory increment mode  # 0x00000080
DMA_CCR_PSIZE = const(0x3 << 8)  # PSIZE[1:0] bits (Peripheral size)  # 0x00000300
DMA_CCR_PSIZE_0 = const(0x1 << 8)  # 0x00000100
DMA_CCR_PSIZE_1 = const(0x2 << 8)  # 0x00000200
DMA_CCR_MSIZE = const(0x3 << 10)  # MSIZE[1:0] bits (Memory size)  # 0x00000C00
DMA_CCR_MSIZE_0 = const(0x1 << 10)  # 0x00000400
DMA_CCR_MSIZE_1 = const(0x2 << 10)  # 0x00000800
DMA_CCR_PL = const(0x3 << 12)  # PL[1:0] bits(Channel Priority level)  # 0x00003000
DMA_CCR_PL_0 = const(0x1 << 12)  # 0x00001000
DMA_CCR_PL_1 = const(0x2 << 12)  # 0x00002000
DMA_CCR_MEM2MEM = const(0x1 << 14)  # Memory to memory mode  # 0x00004000
DMAMUX_CxCR_DMAREQ_ID = const(0x3F << 0)  # DMA Request ID  # 0x0000003F
RCC_AHB1ENR_DMA1EN = const(0x1 << 0)  # 0x00000001
RCC_AHB1ENR_DMA2EN = const(0x1 << 1)  # 0x00000002
RCC_AHB1ENR_DMAMUX1EN = const(0x1 << 2)  # 0x00000004
TIM_DIER_UDE = const(0x1 << 8)  # Update DMA request enable  # 0x00000100
TIM_DIER_CC1DE = const(0x1 << 9)  # Capture/Compare 1 DMA request enable  # 0x00000200
TIM_DIER_CC2DE = const(0x1 << 10)  # Capture/Compare 2 DMA request enable  # 0x00000400
TIM_DIER_CC3DE = const(0x1 << 11)  # Capture/Compare 3 DMA request enable  # 0x00000800
TIM_DIER_CC4DE = const(0x1 << 12)  # Capture/Compare 4 DMA request enable  # 0x00001000
TIM_DIER_COMDE = const(0x1 << 13)  # COM DMA request enable  # 0x00002000
TIM_DIER_TDE = const(0x1 << 14)  # Trigger DMA request enable  # 0x00004000
LL_DMA_CCR_TCIE = const(DMA_CCR_TCIE)  # Transfer complete interrupt
LL_DMA_CCR_HTIE = const(DMA_CCR_HTIE)  # Half Transfer interrupt
LL_DMA_CCR_TEIE = const(DMA_CCR_TEIE)  # Transfer error interrupt
LL_DMA_DIRECTION_PERIPH_TO_MEMORY = const(0x00000000)  # Peripheral to memory direction
LL_DMA_DIRECTION_MEMORY_TO_PERIPH = const(DMA_CCR_DIR)  # Memory to peripheral direction
LL_DMA_DIRECTION_MEMORY_TO_MEMORY = const(DMA_CCR_MEM2MEM)  # Memory to memory direction
LL_DMA_MODE_NORMAL = const(0x00000000)  # Normal Mode
LL_DMA_MODE_CIRCULAR = const(DMA_CCR_CIRC)  # Circular Mode
LL_DMA_PERIPH_INCREMENT = const(DMA_CCR_PINC)  # Peripheral increment mode Enable
LL_DMA_PERIPH_NOINCREMENT = const(0x00000000)  # Peripheral increment mode Disable
LL_DMA_MEMORY_INCREMENT = const(DMA_CCR_MINC)  # Memory increment mode Enable
LL_DMA_MEMORY_NOINCREMENT = const(0x00000000)  # Memory increment mode Disable
LL_DMA_PDATAALIGN_BYTE = const(0x00000000)  # Peripheral data alignment : Byte
LL_DMA_PDATAALIGN_HALFWORD = const(DMA_CCR_PSIZE_0)  # Peripheral data alignment : HalfWord
LL_DMA_PDATAALIGN_WORD = const(DMA_CCR_PSIZE_1)  # Peripheral data alignment : Word
LL_DMA_MDATAALIGN_BYTE = const(0x00000000)  # Memory data alignment : Byte
LL_DMA_MDATAALIGN_HALFWORD = const(DMA_CCR_MSIZE_0)  # Memory data alignment : HalfWord
LL_DMA_MDATAALIGN_WORD = const(DMA_CCR_MSIZE_1)  # Memory data alignment : Word
LL_DMA_PRIORITY_LOW = const(0x00000000)  # Priority level : Low
LL_DMA_PRIORITY_MEDIUM = const(DMA_CCR_PL_0)  # Priority level : Medium
LL_DMA_PRIORITY_HIGH = const(DMA_CCR_PL_1)  # Priority level : High
LL_DMA_PRIORITY_VERYHIGH = const(DMA_CCR_PL)  # Priority level : Very_High
LL_DMAMUX_REQ_MEM2MEM = const(0x00000000)  # memory to memory transfer
LL_DMAMUX_REQ_GENERATOR0 = const(0x00000001)  # DMAMUX request generator 0
LL_DMAMUX_REQ_GENERATOR1 = const(0x00000002)  # DMAMUX request generator 1
LL_DMAMUX_REQ_GENERATOR2 = const(0x00000003)  # DMAMUX request generator 2
LL_DMAMUX_REQ_GENERATOR3 = const(0x00000004)  # DMAMUX request generator 3
LL_DMAMUX_REQ_SAI1_A = const(0x00000012)  # DMAMUX SAI1 A request
LL_DMAMUX_REQ_SAI1_B = const(0x00000013)  # DMAMUX SAI1 B request
LL_DMAMUX_REQ_TIM1_CH1 = const(0x00000015)  # DMAMUX TIM1 CH1 request
LL_DMAMUX_REQ_TIM1_CH2 = const(0x00000016)  # DMAMUX TIM1 CH2 request
LL_DMAMUX_REQ_TIM1_CH3 = const(0x00000017)  # DMAMUX TIM1 CH3 request
LL_DMAMUX_REQ_TIM1_CH4 = const(0x00000018)  # DMAMUX TIM1 CH4 request
LL_DMAMUX_REQ_TIM1_UP = const(0x00000019)  # DMAMUX TIM1 UP request
LL_DMAMUX_REQ_TIM1_TRIG = const(0x0000001A)  # DMAMUX TIM1 TRIG request
LL_DMAMUX_REQ_TIM1_COM = const(0x0000001B)  # DMAMUX TIM1 COM request
LL_DMAMUX_REQ_TIM2_CH1 = const(0x0000001C)  # DMAMUX TIM2 CH1 request
LL_DMAMUX_REQ_TIM2_CH2 = const(0x0000001D)  # DMAMUX TIM2 CH2 request
LL_DMAMUX_REQ_TIM2_CH3 = const(0x0000001E)  # DMAMUX TIM2 CH3 request
LL_DMAMUX_REQ_TIM2_CH4 = const(0x0000001F)  # DMAMUX TIM2 CH4 request
LL_DMAMUX_REQ_TIM2_UP = const(0x00000020)  # DMAMUX TIM2 UP request
LL_DMAMUX_REQ_TIM16_CH1 = const(0x00000021)  # DMAMUX TIM16 CH1 request
LL_DMAMUX_REQ_TIM16_UP = const(0x00000022)  # DMAMUX TIM16 UP request
LL_DMAMUX_REQ_TIM17_CH1 = const(0x00000023)  # DMAMUX TIM17 CH1 request
LL_DMAMUX_REQ_TIM17_UP = const(0x00000024)  # DMAMUX TIM17 UP request


# Debug MCU
class DBGMCU_TypeDef(Register):
    IDCODE: int = 0x00  # /*!< MCU device ID code,             Address offset: 0x00 */
    CR: int = 0x04  # /*!< Debug MCU configuration register,      Address offset: 0x04 */
    # RESERVED1[13]: int = 0x38  # /*!< Reserved,                        0x08-0x38 */
    APB1FZR1: int = 0x3C  # /*!< Debug MCU CPU1 APB1 freeze register,     Address offset: 0x3C */
    C2APB1FZR1: int = 0x40  # /*!< Debug MCU CPU2 APB1 freeze register,     Address offset: 0x40 */
    APB1FZR2: int = 0x44  # /*!< Debug MCU CPU1 APB1 freeze register,     Address offset: 0x44 */
    C2APB1FZR2: int = 0x48  # /*!< Debug MCU CPU2 APB1 freeze register,     Address offset: 0x48 */
    APB2FZR: int = 0x4C  # /*!< Debug MCU CPU1 APB2 freeze register,     Address offset: 0x4C */
    C2APB2FZR: int = 0x50  # /*!< Debug MCU CPU2 APB2 freeze register,     Address offset: 0x50 */

# DMA Controller
class DMA_Channel_TypeDef(Register):
    CCR: int = 0x00  # /*!< DMA channel x configuration register    0x00 */
    CNDTR: int = 0x04  # /*!< DMA channel x number of data register    0x04 */
    CPAR: int = 0x08  # /*!< DMA channel x peripheral address register  0x08 */
    CMAR: int = 0x0C  # /*!< DMA channel x memory address register    0x0C */
    # RESERVED: int = 0x10  # /*!< Reserved,                  0x10 */

# DMA_TypeDef
class DMA_TypeDef(Register):
    ISR: int = 0x00  # /*!< DMA interrupt status register,         Address offset: 0x00 */
    IFCR: int = 0x04  # /*!< DMA interrupt flag clear register,       Address offset: 0x04 */

# DMA Multiplexer
class DMAMUX_Channel_TypeDef(Register):
    CCR: int = 0x00  # /*!< DMA Multiplexer Channel x Control Register  Address offset: 0x0004 * (channel x) */

# DMAMUX_ChannelStatus_TypeDef
class DMAMUX_ChannelStatus_TypeDef(Register):
    CSR: int = 0x00  # /*!< DMA Channel Status Register          Address offset: 0x0080  */
    CFR: int = 0x04  # /*!< DMA Channel Clear Flag Register        Address offset: 0x0084  */

# DMAMUX_RequestGen_TypeDef
class DMAMUX_RequestGen_TypeDef(Register):
    RGCR: int = 0x00  # /*!< DMA Request Generator x Control Register   Address offset: 0x0100 + 0x0004 * (Req Gen x) */

# DMAMUX_RequestGenStatus_TypeDef
class DMAMUX_RequestGenStatus_TypeDef(Register):
    RGSR: int = 0x00  # /*!< DMA Request Generator Status Register    Address offset: 0x0140  */
    RGCFR: int = 0x04  # /*!< DMA Request Generator Clear Flag Register  Address offset: 0x0144  */

# Reset and Clock Control
class RCC_TypeDef(Register):
    CR: int = 0x00  # /*!< RCC clock Control Register,                          Address offset: 0x00 */
    ICSCR: int = 0x04  # /*!< RCC Internal Clock Sources Calibration Register,                Address offset: 0x04 */
    CFGR: int = 0x08  # /*!< RCC Clocks Configuration Register,                       Address offset: 0x08 */
    PLLCFGR: int = 0x0C  # /*!< RCC System PLL configuration Register,                     Address offset: 0x0C */
    PLLSAI1CFGR: int = 0x10  # /*!< RCC PLL SAI1 configuration Register,                      Address offset: 0x10 */
    # RESERVED0: int = 0x14  # /*!< Reserved,                                    Address offset: 0x14 */
    CIER: int = 0x18  # /*!< RCC Clock Interrupt Enable Register,                      Address offset: 0x18 */
    CIFR: int = 0x1C  # /*!< RCC Clock Interrupt Flag Register,                       Address offset: 0x1C */
    CICR: int = 0x20  # /*!< RCC Clock Interrupt Clear Register,                       Address offset: 0x20 */
    SMPSCR: int = 0x24  # /*!< RCC SMPS step-down converter control register,                 Address offset: 0x24 */
    AHB1RSTR: int = 0x28  # /*!< RCC AHB1 peripheral reset register,                       Address offset: 0x28 */
    AHB2RSTR: int = 0x2C  # /*!< RCC AHB2 peripheral reset register,                       Address offset: 0x2C */
    AHB3RSTR: int = 0x30  # /*!< RCC AHB3 & AHB4 peripheral reset register,                   Address offset: 0x30 */
    # RESERVED1: int = 0x34  # /*!< Reserved,                                    Address offset: 0x34 */
    APB1RSTR1: int = 0x38  # /*!< RCC APB1 peripheral reset register 1,                      Address offset: 0x38 */
    APB1RSTR2: int = 0x3C  # /*!< RCC APB1 peripheral reset register 2,                      Address offset: 0x3C */
    APB2RSTR: int = 0x40  # /*!< RCC APB2 peripheral reset register,                       Address offset: 0x40 */
    APB3RSTR: int = 0x44  # /*!< RCC APB3 peripheral reset register,                       Address offset: 0x44 */
    AHB1ENR: int = 0x48  # /*!< RCC AHB1 peripheral clocks enable register,                   Address offset: 0x48 */
    AHB2ENR: int = 0x4C  # /*!< RCC AHB2 peripheral clocks enable register,                   Address offset: 0x4C */
    AHB3ENR: int = 0x50  # /*!< RCC AHB3 & AHB4 peripheral clocks enable register,               Address offset: 0x50 */
    # RESERVED2: int = 0x54  # /*!< Reserved,                                    Address offset: 0x54 */
    APB1ENR1: int = 0x58  # /*!< RCC APB1 peripheral clocks enable register 1,                  Address offset: 0x58 */
    APB1ENR2: int = 0x5C  # /*!< RCC APB1 peripheral clocks enable register 2,                  Address offset: 0x5C */
    APB2ENR: int = 0x60  # /*!< RCC APB2 peripheral clocks enable register,                   Address offset: 0x60 */
    # RESERVED3: int = 0x64  # /*!< Reserved,                                    Address offset: 0x64 */
    AHB1SMENR: int = 0x68  # /*!< RCC AHB1 peripheral clocks enable in sleep and stop modes register,       Address offset: 0x68 */
    AHB2SMENR: int = 0x6C  # /*!< RCC AHB2 peripheral clocks enable in sleep and stop modes register,       Address offset: 0x6C */
    AHB3SMENR: int = 0x70  # /*!< RCC AHB3 & AHB4 peripheral clocks enable in sleep and stop modes register,   Address offset: 0x70 */
    # RESERVED4: int = 0x74  # /*!< Reserved,                                    Address offset: 0x74 */
    APB1SMENR1: int = 0x78  # /*!< RCC APB1 peripheral clocks enable in sleep mode and stop modes register 1,   Address offset: 0x78 */
    APB1SMENR2: int = 0x7C  # /*!< RCC APB1 peripheral clocks enable in sleep mode and stop modes register 2,   Address offset: 0x7C */
    APB2SMENR: int = 0x80  # /*!< RCC APB2 peripheral clocks enable in sleep mode and stop modes register,    Address offset: 0x80 */
    # RESERVED5: int = 0x84  # /*!< Reserved,                                    Address offset: 0x84 */
    CCIPR: int = 0x88  # /*!< RCC Peripherals Clock Configuration Independent Register,            Address offset: 0x88 */
    # RESERVED6: int = 0x8C  # /*!< Reserved,                                    Address offset: 0x8C */
    BDCR: int = 0x90  # /*!< RCC Backup Domain Control Register,                       Address offset: 0x90 */
    CSR: int = 0x94  # /*!< RCC Control and Status Register,                        Address offset: 0x94 */
    CRRCR: int = 0x98  # /*!< RCC Clock Recovery RC Register,                         Address offset: 0x98 */
    HSECR: int = 0x9C  # /*!< RCC HSE Clock Register,                             Address offset: 0x9C */
    # RESERVED7[26]: int = 0x104  # /*!< Reserved,                                    Address offset: 0xA0-0x104 */
    EXTCFGR: int = 0x108  # /*!< RCC Extended Clock Recovery Register,                      Address offset: 0x108 */
    # RESERVED8[15]: int = 0x144  # /*!< Reserved,                                   Address offset: 0x10C-0x144 */
    C2AHB1ENR: int = 0x148  # /*!< RRCC AHB1 peripheral CPU2 clocks enable register,                Address offset: 0x148 */
    C2AHB2ENR: int = 0x14C  # /*!< RCC AHB2 peripheral CPU2 clocks enable register,                Address offset: 0x14C */
    C2AHB3ENR: int = 0x150  # /*!< RCC AHB3 & AHB4 peripheral CPU2 clocks enable register,,            Address offset: 0x150 */
    # RESERVED9: int = 0x154  # /*!< Reserved,                                    Address offset: 0x154 */
    C2APB1ENR1: int = 0x158  # /*!< RCC APB1 peripheral CPU2 clocks enable register 1,               Address offset: 0x158 */
    C2APB1ENR2: int = 0x15C  # /*!< RCC APB1 peripheral CPU2 clocks enable register 2,               Address offset: 0x15C */
    C2APB2ENR: int = 0x160  # /*!< RCC APB2 peripheral CPU2 clocks enable register 1,               Address offset: 0x160 */
    C2APB3ENR: int = 0x164  # /*!< RCC APB3 peripheral CPU2 clocks enable register 1,               Address offset: 0x164 */
    C2AHB1SMENR: int = 0x168  # /*!< RCC AHB1 peripheral CPU2 clocks enable in sleep and stop modes register,    Address offset: 0x168 */
    C2AHB2SMENR: int = 0x16C  # /*!< RCC AHB2 peripheral CPU2 clocks enable in sleep and stop modes register,    Address offset: 0x16C */
    C2AHB3SMENR: int = 0x170  # /*!< RCC AHB3 & AHB4 peripheral CPU2 clocks enable in sleep and stop modes register, Address offset: 0x170 */
    # RESERVED10: int = 0x174  # /*!< Reserved,                                               */
    C2APB1SMENR1: int = 0x178  # /*!< RCC APB1 peripheral CPU2 clocks enable in sleep mode and stop modes register 1, Address offset: 0x178 */
    C2APB1SMENR2: int = 0x17C  # /*!< RCC APB1 peripheral CPU2 clocks enable in sleep mode and stop modes register 2, Address offset: 0x17C */
    C2APB2SMENR: int = 0x180  # /*!< RCC APB2 peripheral CPU2 clocks enable in sleep mode and stop modes register,  Address offset: 0x180 */
    C2APB3SMENR: int = 0x184  # /*!< RCC APB3 peripheral CPU2 clocks enable in sleep mode and stop modes register,  Address offset: 0x184 */

# TIM
class TIM_TypeDef(Register):
    CR1: int = 0x00  # /*!< TIM control register 1,          Address offset: 0x00 */
    CR2: int = 0x04  # /*!< TIM control register 2,          Address offset: 0x04 */
    SMCR: int = 0x08  # /*!< TIM slave mode control register,     Address offset: 0x08 */
    DIER: int = 0x0C  # /*!< TIM DMA/interrupt enable register,    Address offset: 0x0C */
    SR: int = 0x10  # /*!< TIM status register,           Address offset: 0x10 */
    EGR: int = 0x14  # /*!< TIM event generation register,      Address offset: 0x14 */
    CCMR1: int = 0x18  # /*!< TIM capture/compare mode register 1,   Address offset: 0x18 */
    CCMR2: int = 0x1C  # /*!< TIM capture/compare mode register 2,   Address offset: 0x1C */
    CCER: int = 0x20  # /*!< TIM capture/compare enable register,   Address offset: 0x20 */
    CNT: int = 0x24  # /*!< TIM counter register,           Address offset: 0x24 */
    PSC: int = 0x28  # /*!< TIM prescaler register,          Address offset: 0x28 */
    ARR: int = 0x2C  # /*!< TIM auto-reload register,         Address offset: 0x2C */
    RCR: int = 0x30  # /*!< TIM repetition counter register,     Address offset: 0x30 */
    CCR1: int = 0x34  # /*!< TIM capture/compare register 1,      Address offset: 0x34 */
    CCR2: int = 0x38  # /*!< TIM capture/compare register 2,      Address offset: 0x38 */
    CCR3: int = 0x3C  # /*!< TIM capture/compare register 3,      Address offset: 0x3C */
    CCR4: int = 0x40  # /*!< TIM capture/compare register 4,      Address offset: 0x40 */
    BDTR: int = 0x44  # /*!< TIM break and dead-time register,     Address offset: 0x44 */
    DCR: int = 0x48  # /*!< TIM DMA control register,         Address offset: 0x48 */
    DMAR: int = 0x4C  # /*!< TIM DMA address for full transfer,    Address offset: 0x4C */
    OR: int = 0x50  # /*!< TIM option register            Address offset: 0x50 */
    CCMR3: int = 0x54  # /*!< TIM capture/compare mode register 3,   Address offset: 0x54 */
    CCR5: int = 0x58  # /*!< TIM capture/compare register5,      Address offset: 0x58 */
    CCR6: int = 0x5C  # /*!< TIM capture/compare register6,      Address offset: 0x5C */
    AF1: int = 0x60  # /*!< TIM Alternate function option register 1, Address offset: 0x60 */
    AF2: int = 0x64  # /*!< TIM Alternate function option register 2, Address offset: 0x64 */

# Serial Audio Interface
class SAI_TypeDef(Register):
    GCR: int = 0x00  # /*!< SAI global configuration register,    Address offset: 0x00 */
    # RESERVED[16]: int = 0x40  # /*!< Reserved,             Address offset: 0x04 to 0x40 */
    PDMCR: int = 0x44  # /*!< SAI PDM control register,         Address offset: 0x44 */
    PDMDLY: int = 0x48  # /*!< SAI PDM delay register,          Address offset: 0x48 */

TIM2 = TIM_TypeDef(TIM2_BASE)
TIM1 = TIM_TypeDef(TIM1_BASE)
TIM16 = TIM_TypeDef(TIM16_BASE)
TIM17 = TIM_TypeDef(TIM17_BASE)
SAI1 = SAI_TypeDef(SAI1_BASE)
DMA1 = DMA_TypeDef(DMA1_BASE)
DMA1_Channel1 = DMA_Channel_TypeDef(DMA1_Channel1_BASE)
DMA1_Channel2 = DMA_Channel_TypeDef(DMA1_Channel2_BASE)
DMA2 = DMA_TypeDef(DMA2_BASE)
DMA2_Channel1 = DMA_Channel_TypeDef(DMA2_Channel1_BASE)
DMA2_Channel2 = DMA_Channel_TypeDef(DMA2_Channel2_BASE)
DMAMUX1 = DMAMUX_Channel_TypeDef(DMAMUX1_BASE)
DMAMUX1_Channel0 = DMAMUX_Channel_TypeDef(DMAMUX1_Channel0_BASE)
DMAMUX1_Channel7 = DMAMUX_Channel_TypeDef(DMAMUX1_Channel7_BASE)
DMAMUX1_RequestGenerator0 = DMAMUX_RequestGen_TypeDef(DMAMUX1_RequestGenerator0_BASE)
DMAMUX1_ChannelStatus = DMAMUX_ChannelStatus_TypeDef(DMAMUX1_ChannelStatus_BASE)
DMAMUX1_RequestGenStatus = DMAMUX_RequestGenStatus_TypeDef(DMAMUX1_RequestGenStatus_BASE)
RCC = RCC_TypeDef(RCC_BASE)
DBGMCU = DBGMCU_TypeDef(DBGMCU_BASE)


__dev_id = DBGMCU.IDCODE & 0xFFF
if __dev_id != 0x495:
    raise RuntimeError(
        f"_stm_registers.py was generated for stm32wb (0x495), running on {__dev_id}\n"
        "See stm_register_builder.py for details on re-generating for target cpu."
    )
